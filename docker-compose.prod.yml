version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: geoml_hub
      POSTGRES_USER: geoml
      POSTGRES_PASSWORD: ${DOCKER_POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U geoml"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - geoml-network

  # Redis缓存
  redis:
    image: redis:7.0
    command: redis-server --requirepass ${DOCKER_REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${DOCKER_REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - geoml-network

  # MinIO对象存储
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${DOCKER_MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${DOCKER_MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - geoml-network

  # 后端服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      - DATABASE_URL=${DOCKER_DATABASE_URL}
      - REDIS_URL=${DOCKER_REDIS_URL}
      - REDIS_PASSWORD=${DOCKER_REDIS_PASSWORD}
      - MINIO_ENDPOINT=${DOCKER_MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${DOCKER_MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${DOCKER_MINIO_SECRET_KEY}
      - MINIO_SECURE=${DOCKER_MINIO_SECURE}
      - SECRET_KEY=${DOCKER_SECRET_KEY}
      - EXTERNAL_AUTH_URL=${DOCKER_EXTERNAL_AUTH_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - geoml-network

  # 前端服务
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
    environment:
      - PUBLIC_API_BASE_URL=${DOCKER_PUBLIC_API_BASE_URL}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - geoml-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - geoml-network

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  geoml-network:
    driver: bridge