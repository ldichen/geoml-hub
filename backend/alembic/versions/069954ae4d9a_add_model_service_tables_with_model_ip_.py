"""Add model service tables with model_ip field

Revision ID: 069954ae4d9a
Revises: 9802c7eae6a3
Create Date: 2025-07-28 21:11:02.440590

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '069954ae4d9a'
down_revision = '9802c7eae6a3'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('model_services',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('repository_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('service_name', sa.String(length=255), nullable=False, comment='服务名称'),
    sa.Column('model_id', sa.String(length=255), nullable=False, comment='模型标识符'),
    sa.Column('model_ip', sa.String(length=255), nullable=False, comment='模型服务器IP地址'),
    sa.Column('description', sa.Text(), nullable=True, comment='服务描述'),
    sa.Column('example_data_path', sa.String(length=1000), nullable=True, comment='示例数据路径'),
    sa.Column('gradio_port', sa.Integer(), nullable=True, comment='Gradio端口'),
    sa.Column('service_url', sa.String(length=500), nullable=True, comment='服务访问URL'),
    sa.Column('cpu_limit', sa.String(length=50), nullable=True, comment='CPU限制'),
    sa.Column('memory_limit', sa.String(length=50), nullable=True, comment='内存限制'),
    sa.Column('is_public', sa.Boolean(), nullable=True, comment='是否公开访问'),
    sa.Column('access_token', sa.String(length=255), nullable=True, comment='访问令牌'),
    sa.Column('status', sa.String(length=50), nullable=True, comment='服务状态: created, starting, running, stopping, stopped, error, idle'),
    sa.Column('container_id', sa.String(length=255), nullable=True, comment='容器ID'),
    sa.Column('last_health_check', sa.DateTime(timezone=True), nullable=True, comment='最后健康检查时间'),
    sa.Column('access_count', sa.Integer(), nullable=True, comment='访问次数'),
    sa.Column('start_count', sa.Integer(), nullable=True, comment='启动次数'),
    sa.Column('total_runtime_minutes', sa.Integer(), nullable=True, comment='总运行时间(分钟)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='更新时间'),
    sa.Column('last_accessed_at', sa.DateTime(timezone=True), nullable=True, comment='最后访问时间'),
    sa.Column('last_started_at', sa.DateTime(timezone=True), nullable=True, comment='最后启动时间'),
    sa.Column('last_stopped_at', sa.DateTime(timezone=True), nullable=True, comment='最后停止时间'),
    sa.ForeignKeyConstraint(['repository_id'], ['repositories.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('repository_id', 'service_name', name='uq_repo_service_name')
    )
    op.create_index('idx_model_services_model_id', 'model_services', ['model_id'], unique=False)
    op.create_index('idx_model_services_repo', 'model_services', ['repository_id'], unique=False)
    op.create_index('idx_model_services_status', 'model_services', ['status'], unique=False)
    op.create_index('idx_model_services_user', 'model_services', ['user_id'], unique=False)
    op.create_index(op.f('ix_model_services_id'), 'model_services', ['id'], unique=False)
    op.create_table('service_health_checks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False, comment='健康状态: healthy, unhealthy, unknown, timeout'),
    sa.Column('response_time_ms', sa.Integer(), nullable=True, comment='响应时间(ms)'),
    sa.Column('check_type', sa.String(length=50), nullable=True, comment='检查类型: http, tcp, process'),
    sa.Column('endpoint', sa.String(length=500), nullable=True, comment='检查端点'),
    sa.Column('http_status_code', sa.Integer(), nullable=True, comment='HTTP状态码'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='错误信息'),
    sa.Column('error_code', sa.String(length=50), nullable=True, comment='错误代码'),
    sa.Column('checked_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='检查时间'),
    sa.ForeignKeyConstraint(['service_id'], ['model_services.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_service_health_checks_checked_at', 'service_health_checks', ['checked_at'], unique=False)
    op.create_index('idx_service_health_checks_service', 'service_health_checks', ['service_id'], unique=False)
    op.create_index('idx_service_health_checks_status', 'service_health_checks', ['status'], unique=False)
    op.create_index(op.f('ix_service_health_checks_id'), 'service_health_checks', ['id'], unique=False)
    op.create_table('service_instances',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('container_id', sa.String(length=255), nullable=False, comment='容器ID'),
    sa.Column('container_name', sa.String(length=255), nullable=True, comment='容器名称'),
    sa.Column('image_name', sa.String(length=255), nullable=True, comment='镜像名称'),
    sa.Column('host_port', sa.Integer(), nullable=True, comment='主机端口'),
    sa.Column('container_port', sa.Integer(), nullable=True, comment='容器端口'),
    sa.Column('status', sa.String(length=50), nullable=True, comment='实例状态: created, starting, running, stopping, stopped, error'),
    sa.Column('pid', sa.Integer(), nullable=True, comment='进程ID'),
    sa.Column('cpu_usage_percent', sa.DECIMAL(precision=5, scale=2), nullable=True, comment='CPU使用率'),
    sa.Column('memory_usage_bytes', sa.BIGINT(), nullable=True, comment='内存使用量'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='创建时间'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='启动时间'),
    sa.Column('stopped_at', sa.DateTime(timezone=True), nullable=True, comment='停止时间'),
    sa.Column('last_heartbeat', sa.DateTime(timezone=True), nullable=True, comment='最后心跳时间'),
    sa.ForeignKeyConstraint(['service_id'], ['model_services.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('container_id')
    )
    op.create_index('idx_service_instances_container', 'service_instances', ['container_id'], unique=False)
    op.create_index('idx_service_instances_service', 'service_instances', ['service_id'], unique=False)
    op.create_index(op.f('ix_service_instances_id'), 'service_instances', ['id'], unique=False)
    op.create_table('service_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('log_level', sa.String(length=20), nullable=False, comment='日志级别: info, warning, error, debug'),
    sa.Column('message', sa.Text(), nullable=False, comment='日志消息'),
    sa.Column('event_type', sa.String(length=50), nullable=True, comment='事件类型: create, start, stop, access, error, health_check'),
    sa.Column('user_id', sa.Integer(), nullable=True, comment='操作用户'),
    sa.Column('ip_address', postgresql.INET(), nullable=True, comment='操作IP'),
    sa.Column('user_agent', sa.Text(), nullable=True, comment='用户代理'),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='额外的日志数据'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='创建时间'),
    sa.ForeignKeyConstraint(['service_id'], ['model_services.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_service_logs_created_at', 'service_logs', ['created_at'], unique=False)
    op.create_index('idx_service_logs_event_type', 'service_logs', ['event_type'], unique=False)
    op.create_index('idx_service_logs_service', 'service_logs', ['service_id'], unique=False)
    op.create_index('idx_service_logs_user', 'service_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_service_logs_id'), 'service_logs', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_service_logs_id'), table_name='service_logs')
    op.drop_index('idx_service_logs_user', table_name='service_logs')
    op.drop_index('idx_service_logs_service', table_name='service_logs')
    op.drop_index('idx_service_logs_event_type', table_name='service_logs')
    op.drop_index('idx_service_logs_created_at', table_name='service_logs')
    op.drop_table('service_logs')
    op.drop_index(op.f('ix_service_instances_id'), table_name='service_instances')
    op.drop_index('idx_service_instances_service', table_name='service_instances')
    op.drop_index('idx_service_instances_container', table_name='service_instances')
    op.drop_table('service_instances')
    op.drop_index(op.f('ix_service_health_checks_id'), table_name='service_health_checks')
    op.drop_index('idx_service_health_checks_status', table_name='service_health_checks')
    op.drop_index('idx_service_health_checks_service', table_name='service_health_checks')
    op.drop_index('idx_service_health_checks_checked_at', table_name='service_health_checks')
    op.drop_table('service_health_checks')
    op.drop_index(op.f('ix_model_services_id'), table_name='model_services')
    op.drop_index('idx_model_services_user', table_name='model_services')
    op.drop_index('idx_model_services_status', table_name='model_services')
    op.drop_index('idx_model_services_repo', table_name='model_services')
    op.drop_index('idx_model_services_model_id', table_name='model_services')
    op.drop_table('model_services')
    # ### end Alembic commands ###