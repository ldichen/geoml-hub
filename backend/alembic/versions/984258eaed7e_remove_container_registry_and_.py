"""remove_container_registry_and_operations_tables

Revision ID: 984258eaed7e
Revises: 2fefdc1734fd
Create Date: 2025-08-06 02:46:44.935008

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '984258eaed7e'
down_revision = '2fefdc1734fd'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_container_registry_container_id'), table_name='container_registry')
    op.drop_index(op.f('ix_container_registry_controller_id'), table_name='container_registry')
    op.drop_index(op.f('ix_container_registry_id'), table_name='container_registry')
    op.drop_table('container_registry')
    op.drop_index(op.f('ix_service_deployment_history_id'), table_name='service_deployment_history')
    op.drop_table('service_deployment_history')
    op.drop_index(op.f('ix_container_operations_container_id'), table_name='container_operations')
    op.drop_index(op.f('ix_container_operations_controller_id'), table_name='container_operations')
    op.drop_index(op.f('ix_container_operations_id'), table_name='container_operations')
    op.drop_table('container_operations')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('container_operations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('container_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('controller_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('operation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('operation_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('operation_details', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration_seconds', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('automated', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['service_id'], ['model_services.id'], name=op.f('container_operations_service_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('container_operations_pkey'))
    )
    op.create_index(op.f('ix_container_operations_id'), 'container_operations', ['id'], unique=False)
    op.create_index(op.f('ix_container_operations_controller_id'), 'container_operations', ['controller_id'], unique=False)
    op.create_index(op.f('ix_container_operations_container_id'), 'container_operations', ['container_id'], unique=False)
    op.create_table('service_deployment_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('deployment_version', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('controller_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('container_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('deployment_config', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('deployed_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('terminated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('performance_metrics', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['service_id'], ['model_services.id'], name=op.f('service_deployment_history_service_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('service_deployment_history_pkey'))
    )
    op.create_index(op.f('ix_service_deployment_history_id'), 'service_deployment_history', ['id'], unique=False)
    op.create_table('container_registry',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('container_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('controller_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('controller_url', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('controller_type', sa.VARCHAR(length=50), server_default=sa.text("'mmanager'::character varying"), autoincrement=False, nullable=True),
    sa.Column('container_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('image_name', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'unknown'::character varying"), autoincrement=False, nullable=True),
    sa.Column('server_info', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('resource_allocation', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('resource_usage', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('port_mappings', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('host_port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('container_port', sa.INTEGER(), server_default=sa.text('7860'), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('networks', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('stopped_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('failed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('health_status', sa.VARCHAR(length=50), server_default=sa.text("'unknown'::character varying"), autoincrement=False, nullable=True),
    sa.Column('last_health_check', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['service_id'], ['model_services.id'], name=op.f('container_registry_service_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('container_registry_pkey'))
    )
    op.create_index(op.f('ix_container_registry_id'), 'container_registry', ['id'], unique=False)
    op.create_index(op.f('ix_container_registry_controller_id'), 'container_registry', ['controller_id'], unique=False)
    op.create_index(op.f('ix_container_registry_container_id'), 'container_registry', ['container_id'], unique=True)
    # ### end Alembic commands ###