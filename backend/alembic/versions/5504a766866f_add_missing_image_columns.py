"""add_missing_image_columns

Revision ID: 5504a766866f
Revises: f89c9cb281eb
Create Date: 2025-08-04 21:13:15.698948

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5504a766866f'
down_revision = 'f89c9cb281eb'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('container_operations', 'operation_details',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('container_operations', 'started_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('container_operations', 'completed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index(op.f('ix_container_operations_operation_type'), table_name='container_operations')
    op.drop_index(op.f('ix_container_operations_service_id'), table_name='container_operations')
    op.alter_column('container_registry', 'server_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('container_registry', 'resource_allocation',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('container_registry', 'resource_usage',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('container_registry', 'port_mappings',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('container_registry', 'networks',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('container_registry', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('container_registry', 'started_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('container_registry', 'last_sync_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('container_registry', 'stopped_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('container_registry', 'failed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('container_registry', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('container_registry', 'last_health_check',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index(op.f('ix_container_registry_service_id'), table_name='container_registry')
    op.drop_index(op.f('ix_container_registry_status'), table_name='container_registry')
    op.drop_table_comment(
        'image_build_logs',
        existing_comment='镜像构建日志表',
        schema=None
    )
    op.add_column('images', sa.Column('build_context', postgresql.JSON(astext_type=sa.Text()), nullable=True, comment='构建上下文信息'))
    op.alter_column('images', 'id',
               existing_type=sa.INTEGER(),
               comment='镜像ID',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('images_id_seq'::regclass)"))
    op.alter_column('images', 'name',
               existing_type=sa.VARCHAR(length=255),
               comment='镜像名称',
               existing_nullable=False)
    op.alter_column('images', 'tag',
               existing_type=sa.VARCHAR(length=100),
               comment='镜像标签',
               existing_nullable=False)
    op.alter_column('images', 'repository_id',
               existing_type=sa.INTEGER(),
               comment='所属仓库ID',
               existing_nullable=False)
    op.alter_column('images', 'harbor_project',
               existing_type=sa.VARCHAR(length=255),
               comment='Harbor项目名称',
               existing_nullable=False)
    op.alter_column('images', 'harbor_repository',
               existing_type=sa.VARCHAR(length=500),
               comment='Harbor仓库路径',
               existing_nullable=False)
    op.alter_column('images', 'harbor_digest',
               existing_type=sa.VARCHAR(length=255),
               comment='镜像摘要',
               existing_nullable=True)
    op.alter_column('images', 'harbor_size',
               existing_type=sa.INTEGER(),
               comment='镜像大小(字节)',
               existing_nullable=True)
    op.alter_column('images', 'description',
               existing_type=sa.TEXT(),
               comment='镜像描述',
               existing_nullable=True)
    op.alter_column('images', 'dockerfile_content',
               existing_type=sa.TEXT(),
               comment='Dockerfile内容',
               existing_nullable=True)
    op.alter_column('images', 'status',
               existing_type=sa.VARCHAR(length=50),
               comment='镜像状态: uploading, ready, failed, deleted',
               existing_nullable=True,
               existing_server_default=sa.text("'uploading'::character varying"))
    op.alter_column('images', 'upload_progress',
               existing_type=sa.INTEGER(),
               comment='上传进度(0-100)',
               existing_nullable=True)
    op.alter_column('images', 'error_message',
               existing_type=sa.TEXT(),
               comment='错误信息',
               existing_nullable=True)
    op.alter_column('images', 'is_public',
               existing_type=sa.BOOLEAN(),
               comment='是否公开',
               existing_nullable=True)
    op.alter_column('images', 'created_by',
               existing_type=sa.INTEGER(),
               comment='创建用户ID',
               existing_nullable=False)
    op.alter_column('images', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('images', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='更新时间',
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index('ix_images_created_by', 'images', ['created_by'], unique=False)
    op.create_index('ix_images_harbor_path', 'images', ['harbor_project', 'harbor_repository'], unique=False)
    op.create_index(op.f('ix_images_id'), 'images', ['id'], unique=False)
    op.create_index('ix_images_repository_status', 'images', ['repository_id', 'status'], unique=False)
    op.create_foreign_key(None, 'images', 'users', ['created_by'], ['id'])
    op.create_foreign_key(None, 'images', 'repositories', ['repository_id'], ['id'], ondelete='CASCADE')
    op.alter_column('mmanager_controllers', 'last_check_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('mmanager_controllers', 'health_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('mmanager_controllers', 'capabilities',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('mmanager_controllers', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('mmanager_controllers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_mmanager_controllers_enabled'), table_name='mmanager_controllers')
    op.drop_index(op.f('ix_mmanager_controllers_status'), table_name='mmanager_controllers')
    op.alter_column('model_services', 'image_id',
               existing_type=sa.INTEGER(),
               comment='关联的镜像ID',
               existing_nullable=True)
    op.alter_column('service_deployment_history', 'deployment_config',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('service_deployment_history', 'deployed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('service_deployment_history', 'terminated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('service_deployment_history', 'performance_metrics',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.drop_index(op.f('ix_service_deployment_history_controller_id'), table_name='service_deployment_history')
    op.drop_index(op.f('ix_service_deployment_history_service_id'), table_name='service_deployment_history')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_service_deployment_history_service_id'), 'service_deployment_history', ['service_id'], unique=False)
    op.create_index(op.f('ix_service_deployment_history_controller_id'), 'service_deployment_history', ['controller_id'], unique=False)
    op.alter_column('service_deployment_history', 'performance_metrics',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('service_deployment_history', 'terminated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('service_deployment_history', 'deployed_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('service_deployment_history', 'deployment_config',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('model_services', 'image_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='关联的镜像ID',
               existing_nullable=True)
    op.create_index(op.f('ix_mmanager_controllers_status'), 'mmanager_controllers', ['status'], unique=False)
    op.create_index(op.f('ix_mmanager_controllers_enabled'), 'mmanager_controllers', ['enabled'], unique=False)
    op.alter_column('mmanager_controllers', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('mmanager_controllers', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('mmanager_controllers', 'capabilities',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('mmanager_controllers', 'health_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('mmanager_controllers', 'last_check_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'images', type_='foreignkey')
    op.drop_constraint(None, 'images', type_='foreignkey')
    op.drop_index('ix_images_repository_status', table_name='images')
    op.drop_index(op.f('ix_images_id'), table_name='images')
    op.drop_index('ix_images_harbor_path', table_name='images')
    op.drop_index('ix_images_created_by', table_name='images')
    op.alter_column('images', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('images', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('images', 'created_by',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='创建用户ID',
               existing_nullable=False)
    op.alter_column('images', 'is_public',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否公开',
               existing_nullable=True)
    op.alter_column('images', 'error_message',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='错误信息',
               existing_nullable=True)
    op.alter_column('images', 'upload_progress',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='上传进度(0-100)',
               existing_nullable=True)
    op.alter_column('images', 'status',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='镜像状态: uploading, ready, failed, deleted',
               existing_nullable=True,
               existing_server_default=sa.text("'uploading'::character varying"))
    op.alter_column('images', 'dockerfile_content',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Dockerfile内容',
               existing_nullable=True)
    op.alter_column('images', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='镜像描述',
               existing_nullable=True)
    op.alter_column('images', 'harbor_size',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='镜像大小(字节)',
               existing_nullable=True)
    op.alter_column('images', 'harbor_digest',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='镜像摘要',
               existing_nullable=True)
    op.alter_column('images', 'harbor_repository',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='Harbor仓库路径',
               existing_nullable=False)
    op.alter_column('images', 'harbor_project',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Harbor项目名称',
               existing_nullable=False)
    op.alter_column('images', 'repository_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='所属仓库ID',
               existing_nullable=False)
    op.alter_column('images', 'tag',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='镜像标签',
               existing_nullable=False)
    op.alter_column('images', 'name',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='镜像名称',
               existing_nullable=False)
    op.alter_column('images', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='镜像ID',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('images_id_seq'::regclass)"))
    op.drop_column('images', 'build_context')
    op.create_table_comment(
        'image_build_logs',
        '镜像构建日志表',
        existing_comment=None,
        schema=None
    )
    op.create_index(op.f('ix_container_registry_status'), 'container_registry', ['status'], unique=False)
    op.create_index(op.f('ix_container_registry_service_id'), 'container_registry', ['service_id'], unique=False)
    op.alter_column('container_registry', 'last_health_check',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('container_registry', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('container_registry', 'failed_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('container_registry', 'stopped_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('container_registry', 'last_sync_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('container_registry', 'started_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('container_registry', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('container_registry', 'networks',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('container_registry', 'port_mappings',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('container_registry', 'resource_usage',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('container_registry', 'resource_allocation',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('container_registry', 'server_info',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.create_index(op.f('ix_container_operations_service_id'), 'container_operations', ['service_id'], unique=False)
    op.create_index(op.f('ix_container_operations_operation_type'), 'container_operations', ['operation_type'], unique=False)
    op.alter_column('container_operations', 'completed_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('container_operations', 'started_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('container_operations', 'operation_details',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    # ### end Alembic commands ###